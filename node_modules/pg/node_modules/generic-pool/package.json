{
  "name": "generic-pool",
  "description": "Generic resource pooling for Node.JS",
  "version": "1.0.9",
  "author": {
    "name": "James Cooper",
    "email": "james@bitmechanic.com"
  },
  "contributors": [
    {
      "name": "James Cooper",
      "email": "james@bitmechanic.com"
    },
    {
      "name": "Peter Galiba",
      "email": "poetro@poetro.hu",
      "url": "http://poetro.hu/"
    },
    {
      "name": "Gary Dusbabek"
    },
    {
      "name": "Tom MacWright",
      "url": "http://www.developmentseed.org/"
    }
  ],
  "keywords": [
    "pool",
    "pooling",
    "throttle"
  ],
  "main": "lib/generic-pool.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/coopernurse/node-pool.git"
  },
  "engines": {
    "node": ">= 0.2.0"
  },
  "readme": "\n# About\n\n  Generic resource pool.  Can be used to reuse or throttle expensive resources such as\n  database connections.\n\n## Installation\n\n    $ npm install generic-pool\n    \n## History\n\n    1.0.9 - Dec 18 2011\n       - Merged #25 (add getName() - contributed by BryanDonovan)\n       - Merged #27 (remove sys import - contributed by botker)\n       - Merged #26 (log levels - contributed by JoeZ99)\n\n    1.0.8 - Nov 16 2011\n       - Merged #21 (add getter methods to see pool size, etc. - contributed by BryanDonovan)\n       \n    1.0.7 - Oct 17 2011\n       - Merged #19 (prevent release on the same obj twice - contributed by tkrynski)\n       - Merged #20 (acquire() returns boolean indicating whether pool is full - contributed by tilgovi)\n\n    1.0.6 - May 23 2011\n       - Merged #13 (support error variable in acquire callback - contributed by tmcw) \n          - Note: This change is backwards compatible.  But new code should use the two\n                  parameter callback format in pool.create() functions from now on.\n       - Merged #15 (variable scope issue in dispense() - contributed by eevans)\n       \n    1.0.5 - Apr 20 2011\n       - Merged #12 (ability to drain pool - contributed by gdusbabek)\n       \n    1.0.4 - Jan 25 2011\n       - Fixed #6 (objects reaped with undefined timeouts)\n       - Fixed #7 (objectTimeout issue)\n\n    1.0.3 - Dec 9 2010\n       - Added priority queueing (thanks to sylvinus)\n       - Contributions from Poetro\n         - Name changes to match conventions described here: http://en.wikipedia.org/wiki/Object_pool_pattern\n            - borrow() renamed to acquire()\n            - returnToPool() renamed to release()\n         - destroy() removed from public interface\n         - added JsDoc comments\n         - Priority queueing enhancements\n       \n    1.0.2 - Nov 9 2010 \n       - First NPM release\n\n## Example\n\n    // Create a MySQL connection pool with\n    // a max of 10 connections and a 30 second max idle time\n    var poolModule = require('generic-pool');\n    var pool = poolModule.Pool({\n        name     : 'mysql',\n        create   : function(callback) {\n            var Client = require('mysql').Client;\n            var c = new Client();\n            c.user     = 'scott';\n            c.password = 'tiger';\n            c.database = 'mydb';\n            c.connect();\n            \n            // parameter order: err, resource\n            // new in 1.0.6\n            callback(null, c);\n        },\n        destroy  : function(client) { client.end(); },\n        max      : 10,\n        idleTimeoutMillis : 30000,\n        log : true\n    });\n\n    // acquire connection - callback function is called\n    // once a resource becomes available\n    pool.acquire(function(err, client) {\n        client.query(\"select * from foo\", [], function() {\n            // return object back to pool\n            pool.release(client);\n        });\n    });\n    \n## Documentation\n\n    Pool() accepts an object with these slots:\n\n                  name : name of pool (string, optional)\n                create : function that returns a new resource\n                           should call callback() with the created resource\n               destroy : function that accepts a resource and destroys it\n                   max : maximum number of resources to create at any given time\n     idleTimeoutMillis : max milliseconds a resource can go unused before it should be destroyed\n                         (default 30000)\n    reapIntervalMillis : frequency to check for idle resources (default 1000),\n         priorityRange : int between 1 and x - if set, borrowers can specify their\n                         relative priority in the queue if no resources are available.\n                         see example.  (default 1)\n                   log : true/false or function -\n                           If a log is a function, it will be called with two parameters:\n                                                    - log string\n                                                    - log level ('verbose', 'info', 'warn', 'error')\n                           Else if log is true, verbose log info will be sent to console.log()\n                           Else internal log messages be ignored (this is the default)\n\n## Priority Queueing\n\nThe pool now supports optional priority queueing.  This becomes relevant when no resources \nare available and the caller has to wait. acquire() accepts an optional priority int which \nspecifies the caller's relative position in the queue.\n\n     // create pool with priorityRange of 3\n     // borrowers can specify a priority 0 to 2\n     var pool = poolModule.Pool({\n         name     : 'mysql',\n         create   : function(callback) {\n             // do something\n         },\n         destroy  : function(client) { \n             // cleanup.  omitted for this example\n         },\n         max      : 10,\n         idleTimeoutMillis : 30000,\n         priorityRange : 3\n     });\n\n     // acquire connection - no priority - will go at end of line\n     pool.acquire(function(err, client) {\n         pool.release(client);\n     });\n\n     // acquire connection - high priority - will go into front slot\n     pool.acquire(function(err, client) {\n         pool.release(client);\n     }, 0);\n\n     // acquire connection - medium priority - will go into middle slot\n     pool.acquire(function(err, client) {\n         pool.release(client);\n     }, 1);\n\n     // etc..\n\n## Draining\n\nIf you know would like to terminate all the resources in your queue before\ntheir timeouts have been reached, you can use `shutdownNow()` in conjunction\nwith `drain()`:\n\n    pool.drain(function() {\n\t    pool.destroyAllNow();\n    });\n\nOne side-effect of calling `drain()` is that subsequent calls to `acquire()`\nwill throw an Error.\n\n## Pool info\n\nThe following functions will let you get information about the pool:\n\n    // returns factory.name for this pool\n    pool.getName()\n\n    // returns number of resources in the pool regardless of\n    // whether they are free or in use\n    pool.getPoolSize()\n\n    // returns number of unused resources in the pool\n    pool.availableObjectsCount()\n\n    // returns number of callers waiting to acquire a resource\n    pool.waitingClientsCount()\n\n\n## Run Tests\n\n    $ npm install expresso\n    $ expresso -I lib test/*.js\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2010-2011 James Cooper &lt;james@bitmechanic.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "generic-pool@1.0.9",
  "dist": {
    "shasum": "091c80649cdc18dd154394ca4aa0487fce45e59b"
  },
  "_from": "generic-pool@1.0.9",
  "_resolved": "https://registry.npmjs.org/generic-pool/-/generic-pool-1.0.9.tgz"
}
